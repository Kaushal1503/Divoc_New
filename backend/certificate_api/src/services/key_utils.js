const jose = require('node-jose');
const { Buffer } = require('buffer');

const EC_P256_ASN1_PRIVATE_KEY_HEADER_HEX = "308187020100301306072a8648ce3d020106082a8648ce3d030107046d306b0201010420";
const EC_P256_ASN1_PUBLIC_KEY_HEADER_HEX = "a144034200";
const EC_COMPRESSED_KEY_HEX = "04";

const EC_P256_ASN1_PRIVATE_KEY_HEADER_HEX_NO_CERT = "30770201010420"

// PEM to DER encoding
// Drop the first and last lines (BEGIN/END markers), concatenate the others, base64-decode
const PEMtoDER = (pem) => Buffer.from(pem.split(/\r?\n/).slice(1,-2).join(), "base64");

// DER to JWK with x5c attribute, returns [private,public] keys
const DERtoJWK = async (key, certs) => {
  let d;
  let x;
  let y;

  if (key.slice(0,7).toString('hex') == EC_P256_ASN1_PRIVATE_KEY_HEADER_HEX_NO_CERT) {
    // Regular EC Keys
    d = key.slice(7,39);

    x = key.slice(57,89);
    y = key.slice(89,122);
  } else {
    // make expected header and values are good
    if (key.slice(0,36).toString('hex') !== EC_P256_ASN1_PRIVATE_KEY_HEADER_HEX) throw "Invalid EC P-256 ASN.1 private key header";
    if (key.slice(68,73).toString('hex') !== EC_P256_ASN1_PUBLIC_KEY_HEADER_HEX) throw "Invalid EC P-256 ASN.1 public key header";
    if (key.slice(73,74).toString('hex') !== EC_COMPRESSED_KEY_HEX) throw "Invalid EC public key encoding";
    d = key.slice(36,68);
    x = key.slice(74,106);
    y = key.slice(106,138);
  }

  const jwk = await jose.JWK.asKey(
    {
      "kty":"EC",
      "use":"sig",
      "alg":"ES256",
      "crv":"P-256",
      "d":jose.util.base64url.encode(d),
      "x":jose.util.base64url.encode(x),
      "y":jose.util.base64url.encode(y),
      "x5c":certs.map(cert => cert.toString('base64'))
      // SHA-256 kid auto-generated by key import
    }
  );
  // return [JSON.stringify(jwk.toJSON(true)), JSON.stringify(jwk.toJSON(false))]
  return [jwk.toJSON(true), jwk.toJSON(false)]
}

module.exports = {
  PEMtoDER,
  DERtoJWK
};
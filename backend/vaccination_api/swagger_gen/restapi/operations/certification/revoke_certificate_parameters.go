// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRevokeCertificateParams creates a new RevokeCertificateParams object
// no default values defined in spec.
func NewRevokeCertificateParams() RevokeCertificateParams {

	return RevokeCertificateParams{}
}

// RevokeCertificateParams contains all the bound params for the revoke certificate operation
// typically these are obtained from a http.Request
//
// swagger:parameters revokeCertificate
type RevokeCertificateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*flag specifying if certificates for all doses for this refId should be revoked
	  In: query
	*/
	AllDoses *bool
	/*dose(s) for which certificate needs to be revoked. Must include doses between (inclusive of) lowest dose to be revoked and latest dose.
	  In: query
	*/
	Doses []int32
	/*refId for which certificate needs to be revoked
	  Required: true
	  In: path
	*/
	PreEnrollmentCode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRevokeCertificateParams() beforehand.
func (o *RevokeCertificateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAllDoses, qhkAllDoses, _ := qs.GetOK("allDoses")
	if err := o.bindAllDoses(qAllDoses, qhkAllDoses, route.Formats); err != nil {
		res = append(res, err)
	}

	qDoses, qhkDoses, _ := qs.GetOK("doses")
	if err := o.bindDoses(qDoses, qhkDoses, route.Formats); err != nil {
		res = append(res, err)
	}

	rPreEnrollmentCode, rhkPreEnrollmentCode, _ := route.Params.GetOK("preEnrollmentCode")
	if err := o.bindPreEnrollmentCode(rPreEnrollmentCode, rhkPreEnrollmentCode, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAllDoses binds and validates parameter AllDoses from query.
func (o *RevokeCertificateParams) bindAllDoses(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("allDoses", "query", "bool", raw)
	}
	o.AllDoses = &value

	return nil
}

// bindDoses binds and validates array parameter Doses from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *RevokeCertificateParams) bindDoses(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvDoses string
	if len(rawData) > 0 {
		qvDoses = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	dosesIC := swag.SplitByFormat(qvDoses, "")
	if len(dosesIC) == 0 {
		return nil
	}

	var dosesIR []int32
	for i, dosesIV := range dosesIC {
		// items.Format: "int32"
		dosesI, err := swag.ConvertInt32(dosesIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "doses", i), "query", "int32", dosesI)
		}

		dosesIR = append(dosesIR, dosesI)
	}

	o.Doses = dosesIR

	return nil
}

// bindPreEnrollmentCode binds and validates parameter PreEnrollmentCode from path.
func (o *RevokeCertificateParams) bindPreEnrollmentCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PreEnrollmentCode = raw

	return nil
}

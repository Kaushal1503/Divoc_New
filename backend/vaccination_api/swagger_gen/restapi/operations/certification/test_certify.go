// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/api/swagger_gen/models"
)

// TestCertifyHandlerFunc turns a function with the right signature into a test certify handler
type TestCertifyHandlerFunc func(TestCertifyParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn TestCertifyHandlerFunc) Handle(params TestCertifyParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// TestCertifyHandler interface for that can handle valid test certify params
type TestCertifyHandler interface {
	Handle(TestCertifyParams, *models.JWTClaimBody) middleware.Responder
}

// NewTestCertify creates a new http.Handler for the test certify operation
func NewTestCertify(ctx *middleware.Context, handler TestCertifyHandler) *TestCertify {
	return &TestCertify{Context: ctx, Handler: handler}
}

/*TestCertify swagger:route POST /v1/test/certify certification testCertify

Certify the one or more vaccination

Certification happens asynchronously, this requires vaccinator authorization.

*/
type TestCertify struct {
	Context *middleware.Context
	Handler TestCertifyHandler
}

func (o *TestCertify) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTestCertifyParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

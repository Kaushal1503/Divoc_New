// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/divoc/api/swagger_gen/models"
)

// UpdateCertificateV3OKCode is the HTTP code returned for type UpdateCertificateV3OK
const UpdateCertificateV3OKCode int = 200

/*UpdateCertificateV3OK OK

swagger:response updateCertificateV3OK
*/
type UpdateCertificateV3OK struct {
}

// NewUpdateCertificateV3OK creates UpdateCertificateV3OK with default headers values
func NewUpdateCertificateV3OK() *UpdateCertificateV3OK {

	return &UpdateCertificateV3OK{}
}

// WriteResponse to the client
func (o *UpdateCertificateV3OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateCertificateV3BadRequestCode is the HTTP code returned for type UpdateCertificateV3BadRequest
const UpdateCertificateV3BadRequestCode int = 400

/*UpdateCertificateV3BadRequest Invalid input

swagger:response updateCertificateV3BadRequest
*/
type UpdateCertificateV3BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateCertificateV3BadRequest creates UpdateCertificateV3BadRequest with default headers values
func NewUpdateCertificateV3BadRequest() *UpdateCertificateV3BadRequest {

	return &UpdateCertificateV3BadRequest{}
}

// WithPayload adds the payload to the update certificate v3 bad request response
func (o *UpdateCertificateV3BadRequest) WithPayload(payload *models.Error) *UpdateCertificateV3BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update certificate v3 bad request response
func (o *UpdateCertificateV3BadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCertificateV3BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCertificateV3PreconditionFailedCode is the HTTP code returned for type UpdateCertificateV3PreconditionFailed
const UpdateCertificateV3PreconditionFailedCode int = 412

/*UpdateCertificateV3PreconditionFailed Update not allowed

swagger:response updateCertificateV3PreconditionFailed
*/
type UpdateCertificateV3PreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateCertificateV3PreconditionFailed creates UpdateCertificateV3PreconditionFailed with default headers values
func NewUpdateCertificateV3PreconditionFailed() *UpdateCertificateV3PreconditionFailed {

	return &UpdateCertificateV3PreconditionFailed{}
}

// WithPayload adds the payload to the update certificate v3 precondition failed response
func (o *UpdateCertificateV3PreconditionFailed) WithPayload(payload *models.Error) *UpdateCertificateV3PreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update certificate v3 precondition failed response
func (o *UpdateCertificateV3PreconditionFailed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCertificateV3PreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
